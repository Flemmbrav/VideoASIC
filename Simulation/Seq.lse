# $Id: Seq.lse,v 1.3 2006/02/23 04:01:38 jpd Exp $

# n bit yields m
# m is a mask with only bit n set
# 0 bit yields 1
2* : 2 *
bit : 1 swap 2* iterate

variables: state seqp seqc trf tstep t 1level 0level seqbit vidp vidlev

8192 seqsize :constant
seqsize smem :array
seqsize video :array

# set voltage levels for zero and one
# zero one high levels yields nothing
levels : 1level ! 0level !

# Default to something sensible
0.0 3.3 levels

# trf tstep seqinit yields nothing
# initialize the sequencer
# trf is rise/fall time
# tstep is step time
# parameters are floating point, units are seconds
seqinit : smem seqp ! video vidp ! 0 seqc ! 0 state ! 0.0 vidlev ! tstep ! trf !

# n high yields nothing
# n low yields nothing
# set/clear state bits specified by the bitmask n
high : state @ | state !
low : ~ state @ & state !

# v inc yields nothing
# increments the cell v points to
inc : dup @ 1 + swap !

# step yields nothing
step : state @ seqp @!+ vidlev @ vidp @!+ seqc inc

# Generate current time
# =now yields nothing
=now : t @ ,. sp

# Generate current time plus rise/fall time
# =now+ yields nothing
=now+ : t @ trf @ +. ,. sp

# Output logic 1 or zero voltage
# =1 yields nothing
# =0 ditto
=1 : 1level @ ,. sp
=0 : 0level @ ,. sp

# =pwl( yields nothing
=pwl( : " pwl(" ,t

# t+ yields nothing
# step time
t+ : t @ tstep @ +. t !

# =bit yields nothing
# print times and levels depending on flag state
=bit : =now+ =1 t+ =now =1
=bit : then =now+ =0 t+ =now =0

# m pwl( yields nothing
# initialize, output initial state of 0
pwl( : seqbit ! 0.0 t ! smem seqp ! =pwl( =now =0

# Generate one sequencer step.
pwlstep : nl " + " ,t seqp @@+ seqbit @ & 0= =bit

# m =pwl yields nothing
# output a SPICE PWL() program
=pwl : pwl( seqc @ pwlstep iterate " )" ,t nl

# vid( yields nothing
# initialize, output initial voltage of 0
pwl( : 0.0 t ! video vidp ! =pwl( =now 0.0 ,.


# Generate one video step.
vidstep : nl " + " ,t t+ =now vidp @@+ ,.

# m =vid yields nothing
# output a SPICE PWL() program for video
=vid : pwl( seqc @ vidstep iterate " )" ,t nl

# $Log: Seq.lse,v $
# Revision 1.3  2006/02/23 04:01:38  jpd
# Can now simulate and reduce results to measurements.
#
# Revision 1.2  2006/02/21 01:49:24  jpd
# First working test of a complete chain.
#
# Revision 1.1  2006/02/20 18:23:43  jpd
# Pseudo-sequencer for clock generation.
#
